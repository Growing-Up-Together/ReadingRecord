# 08. 인덱스

`인덱스란? 데이터베이스 쿼리의 성능과 관련되며 쿼리 튜닝의 기본`이 됨. ~ MySQL 8.0 까지 타 사용 RDBMS 에서 제공하는 기능, MyISAM 스토리지 엔진에서만 제공하던 전문 검색, 위치 기반 검색 기능도 모두 InnoDB 스토리지 엔진에서 사용 가능하도록 개선 됨.

## 8.1 디스크 읽기 방식

### 하드 디스크 드라이브(HDD) 와 솔리드 스테이트 드라이브(SSD)

- SSD 는 기존 HDD 에서 저장용 플래터(원판)을 제거하고 플래시 메모리를 장착 함
⇒ 디스크 원판을 회전시킬 필요가 없으므로 `데이터 읽기/쓰기 속도가 빠름`
- `순차 I/O 성능 차이 ⇒ **SSD ≥ HDD**`
`랜덤 I/O 성능 ⇒ **SSD >>>> HDD**`
- 데이터베이스 서버에서는 `랜덤 I/O를 통해 데이터 읽기/쓰기 작업이 대부분` 임
⇒ **SSD 는 DBMS용 스토리지에 최적**

### 랜덤 I/O 와 순차 I/O

> `I/O` : 입출력(Input & Output) 의 준말
> 

> `랜덤 I/O` : 하드디스크 드라이브의 플래터(원판)를 돌려서 읽어야 할 데이터가 저장된 위치로 디스크 헤더를 이동시킨 다음 데이터를 읽는 것
> 

> `순차 I/O` : 랜덤 I/O 와 작업 과정은 동일. 디스크의 헤더를 움직이지 않고 한 번에 많은 데이터를 읽는 것
> 

![](../images/heedong/8-1.png)

- 디스크에 데이터를 읽고 쓰는데 걸리는 시간은 디스크 헤더를 움직여서 읽고 쓸 위치로 옮기는 단계에서 결정
- 그림에서는 3개의 페이지를 디스크에 기록하기 위해
**순차 I/O → 1번 시스템 콜 요청**
**랜덤 I/O → 3번 시스템 콜 요청**
⇒ 순차 I/O 는 1번, 랜덤 I/O 는 3번의 디스크 헤더를 움직여 디스크에 기록해야 할 위치를 찾음
⇒ `순차 I/O 속도 = 3 * 랜덤 I/O 속도`
- 디스크의 성능은 `디스크 헤더의 위치 이동 없이 얼마나 많은 데이터를 한번에 기록하느냐` 에 의해 결정
- 랜덤 I/O 는 순차 I/O 에 비해 여러번 쓰기 또는 읽기 요청을 함 ⇒ `랜덤 I/O의 작업 부하가 더 큼`
- `쿼리 튜닝은 랜덤 I/O 자체를 줄이는 것이 목적`
⇒ 즉, 쿼리를 처리하는데 꼭 필요한 데이터만 읽도록 쿼리를 개선한다는 의미

## 8.2 인덱스란?

- DBMS 에서 테이블의 데이터 검색을 위해 인덱스를 만들어 둠
    - `칼럼의 값과 해당 레코드가 저장된 주소를 key-value 형태`로 만듦
    - 빠른 검색을 위해 `칼럼의 값을 주어진 순서로 미리 정렬`해서 보관
- 저장되는 값을 항상 정렬된 상태로 유지하는 `SortedList 자료 구조와 동일한 특성`을 가지며, 
SortedList 자료 구조는 데이터가 저장될 때마다 항상 값을 정렬해야 함
    - 저장하는 과정이 복잡하고 느림 ⇒ `INSERT, UPDATE, DELETE 문장 처리 속도 ↓`
    - 원하는 값을 빠르게 찾을 수 있음 ⇒ `SELECT 처리 속도 ↑`
- 결과적으로, DBMS 에서 `인덱스는 데이터의 저장(INSERT, UPDATE, DELETE) 성능을 희생하고, 데이터의 읽기(SELECT) 성능을 높이는 기능`
- 인덱스는 데이터를 관리하는 방식에 따라 프라이머리 키(Primary Key), 보조 키(Secondary Key) 로 구분 가능하며, 데이터 저장 방식에 따라 B-Tree 인덱스, Hash 인덱스 등으로 구분 가능
    - 프라이머리 키 : 레코드를 대표하는 칼럼의 값으로 만들어진 인덱스. 식별자. null 및 중복값 허용불가
    - 보조 키 : 프라이머리 키를 제외한 모든 인덱스
    - B-Tree : 가장 일반적으로 사용되는 인덱스 알고리즘. 칼럼의 값을 변형하지 않고 원래의 값을 이용해 인덱싱하는 알고리즘
    - Hash : 칼럼의 값으로 해시값을 계산해서 인덱싱하는 알고리즘. 매우 빠른 검색을 지원. like 및 범위 검색 불가. 메모리 기반 데이터베이스에서 많이 사용

## 8.3 B-Tree 인덱스

B-Tree(Balanced Tree) 는 데이터베이스의 인덱싱 알고리즘 중 가장 일반적으로 사용 됨. 칼럼의 원래 값을 변형시키지 않고 인덱스 구조체 내에서는 항상 정렬된 상태로 유지하며, 일반적인 용도에 적합함.

### 구조 및 특성

B-Tree 는 3가지 노드로 구분되는 트리 구조
1. 최상위에 하나의 `루트 노드(Root Node)`
2. 루트 노드 하위에 자식 노드가 붙어 있는 형태며 가장 하위에 붙어 있는 `리프 노드(Leaf Node)`
    ⇒ 인덱스의 리프 노드는 항상 **실제 데이터 레코드의 주솟값**을 가짐
3. 루트 노드도 리프 노드도 아닌 중간의 노드인 `브랜치 노드(Branch Node)`

![](../images/heedong/8-2.png)

그림과 같이 `인덱스 키 값은 모두 정렬` 됨. 데이터 파일의 레코드는 정렬돼 있지 않고 임의의 순서로 저장 됨. 인덱스는 테이블의 키 칼럼만 가지고 있으므로 나머지 칼럼을 읽으려면 데이터 파일에서 해당 레코드를 찾아야 함.

![](../images/heedong/8-3.png)


MyISAM 테이블의 인덱스와 데이터 파일의 관계를 보여줌. `세컨더리 인덱스가 물리적인 주소를 가짐`

![](../images/heedong/8-4.png)


InnoDB 테이블의 인덱스와 데이터 파일의 관계를 보여줌. 

- 프라이머리 키가 ROWID 역할을 하며, `프라이머리 키를 주소처럼 사용하기 때문에 논리적인 주소를 가짐`
- 인덱스에 저장돼 있는 프라이머리 키 값을 이용하여 프라이머리 키 인덱스를 검색 → 프라이머리 키 인덱스의리프 페이지에 저장돼 있는 레코드를 읽음
⇒ `InnoDB 스토리지 엔진에서는 모든 세컨더리 인덱스 검색에서 데이터 레코드를 읽기 위해 반드시 프라이머리 키를 저장하고 있는 B-Tree 를 다시 한번 검색해야 함`

### B-Tree 인덱스 키 추가 및 삭제

### 인덱스 키 추가

새로운 키 값이 B-Tree에 저장될 때 

- 테이블의 `스토리지 엔진에 따라 즉시 인덱스에 저장되거나 저장되지 않을 수 있음`
- `저장될 키 값을 이용해 B-Tree 상의 적절한 위치를 검색`해야 함
- 저장될 위치 결정 → 레코드의 키 값과 주소 정보를 리프 노드에 저장 → 리프 노드가 꽉 차면 분리(Split) 작업 발생 → 상위 브랜치 노드까지 처리 범위가 넓어짐 → `쓰기작업에 비용이 많이 듦`
    
    [[MySQL] 인덱스 1편 - BTree 그리고 인덱스(INDEX)의 정체](https://blog.naver.com/PostView.naver?blogId=pjt3591oo&logNo=222479946713&parentCategoryNo=&categoryNo=106&viewDate=&isShowPopularPosts=true&from=search)
    
- 인덱스 추가로 발생하는 영향은 대략적으로 아래와 같이 계산. 해당 작업 비용은 디스크로부터 인덱스 페이지 읽기/쓰기를 해야 해서 걸리는 시간 임.
    
    ```html
    ex. 인덱스 추가로 발생하는 영향 계산 방식
    
    테이블에 레코드 추가 작업 비용 = 1
    테이블의 인덱스 키 추가 작업 비용 = 1.5
    
    테이블에 인덱스가 하나도 없는 경우 작업 비용 => 1
    테이블에 인덱스 3개가 있는 경우 => (1.5 * 3) + 1
    ```
    
- Insert 문장 실행 시,
MyISAM, Memory 스토리지 엔진 → 즉시 새로운 키 값을 B-Tree 인덱스에 변경
InnoDB 스토리지 엔진 → 인덱스 키 추가 작업 지연 처리. PK 혹은 유니크 인덱스의 경우는 즉시 처리

### 인덱스 키 삭제

- 해당 키 값이 저장된 B-Tree 리프 노드를 찾아 삭제 마크만 하면 작업 완료
- 삭제 마킹된 인덱스 키 공간은 방치하거나 재활용 가능
- MySQL 5.5 ~ InnoDB 스토리지 엔진에서 삭제 마킹 작업도 지연 처리 가능
- MyISAM, Memory 스토리지 엔진의 테이블에서는 인덱스 키 삭제 완료 후 쿼리가 실행 완료 됨

### 인덱스 키 변경

- B-Tree 키 값 변경 작업은 `기존의 인덱스 키 값 삭제 → 새로운 인덱스 키 값을 추가`
- InnoDB 스토리지 엔진의 테이블에 대해서는 체인지 버퍼를 활용해 지연 처리 가능

### 인덱스 키 검색

- 인덱스 구축의 가장 큰 목적은 `빠른 검색`
- 인덱스 검색 작업은 `B-Tree 루트 노드-브랜치 노드-리프 노드까지 이동하면서 비교 작업을 수행(=트리 탐색)`
- SELECT, UPDATE, DELETE 에서 트리 탐색 사용
- B-Tree 이용 시 100% 일치, 앞부분 일치, 부등호 비교 조건에서 활용 가능
- 뒷 부분 검색이나 인덱스 키 값에 변형이 가해진 경우(=함수나 연산을 수행한 결과로 정렬하거나 검색) 빠른 검색 기능 사용 불가

### B-Tree 인덱스 사용에 영향을 미치는 요소

B-Tree 인덱스는 다음 사항에 의해 검색 및 변경 작업의 성능이 영향 받음

- 인덱스를 구성하는 칼럼 크기
- 인덱스를 구성하는 레코드 건수
- 유니크한 인덱스 키 값의 개수
- etc

### 인덱스 키 값의 크기

> `페이지(Page) = 블록(Block)` : InnoDB 스토리지 엔진은 디스크에 데이터를 저장하는 가장 기본 단위
> 

> 페이지는 `디스크의 모든 읽기/쓰기 작업의 최소 단위`, InnoDB 스토리지 엔진의 버퍼 풀에서 데이터를 버퍼링하는 기본 단위
> 
- `인덱스도 페이지 단위로 관리`
- DBMS 의 `B-Tree 자식 노드의 개수`가 가변적인 구조이며, `인덱스의 페이지 크기와 키 값의 크기로 결정 됨`
    
    ![](../images/heedong/8-5.png)

    
    ```html
    InnoDB 스토리지 엔진 페이지 크기는 innodb_page_size 시스템 변수로 설정되며 
    기본값 16KB(4~64KB)
    
    ex1)
    인덱스 키 = 16B
    자식 노드 주소 영역 = 12B
    
    1개의 인덱스 페이지에 585개의 키(자식 노드) 저장
    16 * 1024 / (16 + 12) = 585
    
    ex2)
    인덱스 키 = 32B
    자식 노드 주소 영역 = 12B
    
    1개의 인덱스 페이지에 372개의 키 저장
    16 * 1024 / (32 + 12) = 372
    
    SELECT 쿼리로 500개의 데이터를 읽을 때,
    ex1은 인덱스 페이지 1번, ex2는 2번을 디스크로부터 읽어야 함
    
    따라서,
    인덱스 구성 키 값⬆️ = 디스크로 부터 읽은 횟수 ⬆️ = 속도⬇️
    InnoDB 버퍼 풀, MyISAM 캐시 영역은 제한적
     = 인덱스 크기 ⬆️
     = 메모리에 캐시 가능한 레코드 수 ⬇️
     => 메모리 효율 ⬇️
    ```
    

### B-Tree 깊이

B-Tree 인덱스의 깊이(Depth) 는

- 직접 제어할 방법 X
- `인덱스 키 값 ⬆️ = 인덱스 페이지가 담을 수 있는 키 값의 개수 ⬇️`
ex1) 인덱스 키 값 16B, 깊이 3인 경우, 최대 2억개 키 값 저장 가능 → 585 * 585 * 585
ex2) 인덱스 키 값 32B, 깊이 3인 경우, 최대 5천만개 키 값 저장 가능 → 372 * 372 * 372
- `인덱스 키 값의 크기는 가능한 작게 만드는 것이 좋음`
- 대용량 데이터베이스라도 5단계 이상까지 깊어지는 경우는 거의 없음

### 선택도(기수성)

- 인덱스에서 `선택도(Selectivity) = 기수성(Cardinality)` 의미로 사용
- `모든 인덱스 키 값 가운데 유니크한 값의 수를 의미`
ex) 전체 인덱스 키 값의 수 100, 유니크한 값의 수 10 → `10 /100 = 기수성 10`
- 인덱스는 `선택도⬆️ = 검색 대상 ⬇️ = 처리 속도 빠름`

### 읽어야 하는 레코드의 건수

- 인덱스를 통해 테이블의 레코드를 읽는 것은 높은 비용이 드는 작업
- 1 * 인덱스를 이용해 레코드 읽는 것 = 4 ~ 5 * 테이블에서 직접 레코드 읽는 것
→ 전체 테이블 레코드의 20 ~ 25% 넘어서면 테이블을 직접 읽어서 필터링하는 것이 효율적
→ 25% 이상 많은 레코드를 읽는 경우, MySQL 옵티마이저가 인덱스 사용 힌트를 무시하고
    테이블을 직접 읽는 방식으로 처리

### B-Tree 인덱스를 통한 데이터 읽기

### 인덱스 레인지 스캔

- 가장 대표적인 인덱스 접근 방식
- `검색해야 할 인덱스 범위가 결정됐을 때 사용하는 방식`
- 루프 노드에서  비교 시작
브랜치-리프 노드 순서로 찾아서 레코드의 시작 지점 확인
(시작 지점 확인 후) 리프 노드의 레코드를 순서대로 읽어들임 = 스캔
(스캔을 멈춰야 하는 위치 도착) 지금까지 읽은 레코드 반환 후 쿼리 종료
    
    ![](../images/heedong/8-6.png)

    
- 실제 레코드를 읽어 오는 경우, 인덱스 자체의 정렬 특성으로 `인덱스를 구성하는 칼럼의 정순/역순으로 정렬된 상태의 레코드를 가져옴`
    
    ![](../images/heedong/8-7.png)

    
- `인덱스 레인지 스캔 3단계`
    
    ```
    1. **인덱스 탐색(Index Seek)** = 인덱스에서 조건을 만족하는 값이 저장된 위치를 찾음
    2. **인덱스 스캔(Index Scan)** = 탐색된 위치부터 필요한 만큼 인덱스를 차례로 읽음
    3. 스캔으로 읽어 들인 인덱스 키와 레코드 주소를 이용해 
       레코드 저장된 페이지와 최종 레코드를 읽어옴
    
    커버링 인덱스(2단계까지만 처리되는 인덱스)는 레코드를 읽지 않아도 되기 때문에 
    성능이 빨라짐 
    ```
    
- 인덱스 레인지 1,2 단계 작업 관련 상태 값
    
    ```sql
    -- Handler_read_key: 1번 단계 실행 횟수
    -- Handler_read_next: 2번 단계로 인덱스 정순으로 읽은 레코드 건수
    -- Handler_read_prev: 2번 단계로 인덱스 역순으로 읽은 레코드 건수
    -- Handler_read_first, Handler_read_last: 인덱스 첫 번째, 마지막 레코드 읽은 횟수
    mysql> show status like 'Handler_%';
    ```
    

### 인덱스 풀 스캔

인덱스의 처음부터 끝까지 모두 읽는 방식을 `인덱스 풀 스캔` 이라고 함.

- 쿼리의 조건절에 사용된 칼럼이 인덱스의 첫 번째 칼럼이 아닌 경우 사용
ex) A, B, C 칼럼 순서대로 인덱스 생성. 쿼리의 조건 절은 B or C 로 검색 하는 경우
- 쿼리가 인덱스에 명시된 컬럼만으로 조건을 처리하는 경우 사용
- 인덱스 크기 < 테이블 크기 = `인덱스만 읽는 것이 효율적`
- 인덱스 리프 노드의 제일 앞 or 뒤로 이동
인덱스의 리프 노드를 연결하는 링크드 리스트를 따라 처음~끝까지 스캔
→ 효율 : 레인지 스캔 > `인덱스 풀 스캔` > 테이블 풀 스캔
    
    ![](../images/heedong/8-8.png)

    

### 루스 인덱스 스캔

- `루스(Loose) 인덱스 스캔 : 느슨하게 or 듬성듬성하게 인덱스를 읽는 것을 의미`
타이트(Tight) 인덱스 스캔 : 인덱스 레인지 스캔, 인덱스 풀 스캔
- MySQL 8.0 ~ 타 상용 DBMS에서 지원하는 `인덱스 스킵 스캔과 같은 최적화를 지원`하기 시작
- 인덱스 레인지 스캔과 비슷하게 작동. `필요치 않은 인덱스 키 값은 무시하고 다음으로 넘어가는 형태로 처리` → GROUP BY, MAX(), MIN() 함수 최적화 하는 경우 사용
    
    ![](../images/heedong/8-9.png)

    
    ```sql
    -- dept_emp 테이블에 dept_no, emp_no 두 개의 칼럼으로 인덱스 생성
    -- 인덱스는 (dept_no, emp_no) 조합으로 정렬
    -- group by dept_no로 정렬되어 있기 때문에, emp_no 값만 읽으면 됨
    -- where 조건에 만족하지 않은 값은 skip 후 다음 레코드로 이동
    mysql> SELECT dept_no, MIN(emp_no)
    			 FROM dept_emp
    			 WHERE dep_no 
    				BETWEEN 'd002' AND 'd004'
    			 GROUP BY dept_no;
    ```
    

### 인덱스 스킵 스캔

- 데이터베이스 서버에서 인덱스의 핵심은 `값이 정렬되어 있음`.
- 인덱스 사용을 위해서는 where 조건절에 첫 번째 인덱스 컬럼에 대한 비교조건이 필수
    
    ```sql
    mysql> alter table employees add index ix_gender_birthdate (gender, birth_date);
    
    -- 인덱스 사용 불가, gender 칼럼에 대한 조건이 없음
    mysql> select * from employees where birth_date>='1965-02-01';
    -- 인덱스 사용 가능
    mysql> select * from employees where gender='M' and birth_date>='1965-02-01';
    ```
    
- MySQL 8.0 ~ 옵티마이저가 인덱스 스킵 스캔(Index Skip Scan, birth_date 칼럼만으로 인덱스 검색 가능) 최적화 기능 도입
    
    ```sql
    -- ~ MySQL 8.0 index_skip_scan=off
    mysql> SET optimizer_switch='skip_scan=off';
    mysql> EXPLAIN 
    		   SELECT gender, birth_date
    			 FROM employees
    			 WHERE birth_date >= '1965-02-01';
    -- [type=index] => 풀 인덱스 스캔
    +----+-----------+-----------------------------+--------------------------+
    | id | table     | type  | key                 | Extra                    |
    +----+-----------+-----------------------------+--------------------------+
    | 1  | employees | index | ix_gender_birthdate | Using where; Using Index |
    +----+-----------+-----------------------------+--------------------------+
    
    -- MySQL 8.0 ~ index_skip_scan=on
    mysql> SET optimizer_switch='skip_scan=on';
    mysql> EXPLAIN 
    		   SELECT gender, birth_date
    			 FROM employees
    			 WHERE birth_date >= '1965-02-01';
    -- [type=range] => 필요한 인덱스만 읽음
    -- [Using index for skip scan] => ix_gender_birthdate 인덱스에 대해 인덱스 스킵 스캔 활용하여 데이터 조회
    +----+-----------+-----------------------------+---------------------------------------+
    | id | table     | type  | key                 | Extra                                 |
    +----+-----------+-----------------------------+---------------------------------------+
    | 1  | employees | range | ix_gender_birthdate | Using where; Using Index for skip scan|
    +----+-----------+-----------------------------+---------------------------------------+
    ```
    
- MySQL 옵티마이저는 gender 칼럼에서 유니크한 값 모두 조회 후 gender 칼럼에 조건 추가하여 쿼리 실행하는 형태로 처리
    
    ![](../images/heedong/8-10.png)

    
    ```sql
    -- 인덱스 스킵 스캔 처리 방식, gender(enum type)=M,F
    mysql> SELECT gender, birth_date 
    			 FROM employees 
    			 WHERE gender='M' AND birth_date>='1965-02-01'
    mysql> SELECT gender, birth_date 
    		   FROM employees 
    			 WHERE gender='F' AND birth_date>='1965-02-01'
    ```
    
- 인덱스 스킵 스캔 단점
    - where 조건절에 조건이 없는 인덱스의 선행 칼럼의 `유니크 값의 개수가 적어야 최적화 가능`
    - 쿼리가 인덱스에 존재하는 컬럼만으로 처리 가능해야 함(커버링 인덱스)
        
        ```sql
        -- 모든 컬럼을 조회해야 함으로 풀 테이블 스캔
        mysql> EXPLAIN 
        		   SELECT *
        			 FROM employees
        			 WHERE birth_date >= '1965-02-01';
        +----+-----------+----------------------+------------+
        | id | table     | type | key  | rows   | Extra      |
        +----+-----------+----------------------+------------+
        | 1  | employees | All  | NULL | 300363 | Using where|
        +----+-----------+----------------------+------------+
        ```
        

### 다중 컬럼 인덱스

![](../images/heedong/8-11.png)

- 두 개 이상의 칼럼으로 구성된 인덱스를 `다중 컬럼 인덱스(복합 인덱스, Concatenated Index)` 라고 함.
- 인덱스의 두 번째 칼럼은 첫 번째 칼럼에 의존해서 정렬됨 
→ 두 번째 칼럼의 정렬은 첫 번째 칼럼이 똑같은 레코드에서만 의미가 있음
- `다중 칼럼 인덱스에서는 인덱스 내 각 칼럼의 위치가 중요함`

### B-Tree 인덱스의 정렬 및 스캔 방향

### 인덱스의 정렬

MySQL 8.0 ~ 정렬순서를 혼합한 인덱스도 생성 가능

```sql
mysql> CREATE INDEX ix_teamname_userscore 
			 ON employees (team_name ASC, user_score DESC);
```

### 인덱스 스캔 방향

- 인덱스 생성시점에 오름차순/내림차순 정렬이 결정되며, 그 상태로 정렬됨
- 인덱스를 읽는 방향에 따라 오름차순, 내림차순으로 값을 가져올 수 있음

### 내림차순 인덱스

![](../images/heedong/8-12.png)

- `오름차순 인덱스(Ascending index`) : 작은 값의 인덱스 키가 B-Tree의 왼쪽으로 정렬된 인덱스
- `내림차순 인덱스(Descending index)` : 큰 값의 인덱스 키가 B-Tree의 왼쪽으로 정렬된 인덱스
- `인덱스 정순 스캔(Forward index scan)` : 인덱스 키의 크고 작음에 관계없이 인덱스 리프 노드의 왼쪽 페이지부터 오른쪽으로 스캔
- `인덱스 역순 스캔(Backward index scan)` : 인덱스 키의 크고 작음에 관계없이 인덱스 리프 노드의 오른쪽 페이지부터 왼쪽으로 스캔

### B-Tree 인덱스의 가용성과 효율성

### 비교 조건의 종류와 효율성

![](../images/heedong/8-13.png)

```sql
mysql> SELECT * FROM dept_emp
			 WHERE dept_no = 'd002' AND emp_no >= 10114;
```

- 케이스 A : INDEX (dept_no, emp_no)
    - `dept_no='d002' and emp_no>=10144` 레코드 찾기
    - 이후 데이터는 정렬되어 있으므로 쭉 읽기. `dept_no != 'd002'` 데이터까지 읽기
    - 조건에 맞는 데이터만 읽음. 작업 범위를 결정하는 `작업 범위 결정 조건`
- 케이스 B : INDEX (emp_no, dept_no)
    - `emp_no >= 10144 AND dept_no = 'd002'` 레코드 찾기
    - 이후 레코드 중 `dept_no = 'd002'` 조건에 부합하는지 확인
    - 단순 필터링 역할만 함. `필터링 조건` 또는 `체크 조건`

### 인덱스의 가용성

작업 범위 결정 조건 사용 불가. 체크 조건으로 인덱스 사용 가능 조건

- NOT-EQUAL 로 비교된 경우
- LIKE ‘%??’
- 인덱스 컬럼이 변형된 후 비교
- 데이터 타입이 서로 다른 비교 등