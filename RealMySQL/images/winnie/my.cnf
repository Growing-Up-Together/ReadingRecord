# MySQL이 내부적으로 자기 자신을 식별하는 아이디 값 (Master / Slave 구성에서 자신을 식별하는데 사용)
server-id = 1

# MySQL이 설치된 서버의 운영체제 계정 (MySQL 서버는 입력된 운영체제 계정으로 MySQL 인스턴스를 실행)
user = mysql
port = 3306

# MySQL 서버의 홈 디렉토리
basedir = /usr/local/mysql

# MyISAM 의 데이터 파일이 저장되는 디렉토리
datadir = /usr/local/mysql/data

# MySQL이 생성하는 내부 임시 테이블의 데이터 파일이 저장되는 위치 (쿼리가 종료되면 데이터는 자동으로 삭제)
# MySQL 서버는 정렬이나 그룹핑과 같은 처리를 위해 내부적으로 임시 테이블을 생성한다.
tmpdir = /usr/local/mysql/tmp
socket = /usr/local/mysql/tmp/mysql.sock

# MySQL 서버의 기본 문자집합을 설정
character-set-server = utf8
collation-server = utf8_general_ci

# MySQL 서버 내에서 기본적으로 사용할 스토리지 엔진
# MySQL 서버가 내부적으로 생성하는 임시 테이블은 MyISAM 스토리지 엔진만 사용한다.
default-storage-engine = InnoDB

# 클라이언트의 접속 시 해당 클라이언트가 접속 허용된 사용자인지 확인하기 위해, 클라이언트의 IP 주소를 이용해 역으로 DNS 명을 가져오는 역 DNS 검색을 하지 않는 옵션
# 이 옵션은 설정 변수명 자체가 name-resolve 작업을 비활성화한다는 뜻이다.
# 성능상의 이유로 역 DNS 검색은 비활성화해서 사용하는 것이 일반적이다.
skip-name-resolve

# 일정 시간에 반복되는 스케줄러 작업 (사용하려면 ON으로 변경)
# 이벤트 스케줄러는 MySQL 내에서 실행되는 별도의 스레드를 필요로 한다.
event-scheduler = OFF

# sysdate()을 now()와 동일하게 동작시키는 옵션
sysdate-is-now

# 다수의 클라이언트가 동시에 인증 요청을 할 때 쌓아두는 Queue size
back_log = 100

# MySQL 서버가 허용할 수 있는 최대 클라이언트 연결 수를 제한
max_connectiosn = 300
max_connect_errors = 999999

# MySQL 서버의 스레드 풀에 최대 몇 개까지의 스레드를 보관할지 결정
# 보통 WAS 쪽에서 커넥션 풀로 커넥션을 관리하기 때문에, 대량의 커넥션 요청이 발생하지 않을 것이므로 이 값을 크게 설정할 필요는 없다.
thread_cache_size = 50
thread_open_cahce = 400

# MySQL 서버에 연결된 클라이언트의 요청 타임아웃 시간
wait_timeout = 28800

# MySQL 서버에 전달 또는 서버로부터 받게 되는 패킷의 최대 길이 (기본값은 16MB)
max_allowed_packet = 32M

# 임시테이블 및 스토리지 엔진이 Moemory인 테이블들이 사용하는 메모리 크기
max_heap_table_size = 32M

# 메모리에 생성되는 임시 테이블의 최대값을 제어하는 값
tmp_table_size = 512K

# 아래 4가지 buffer_size는 세션 범위 변수이다.
# 1) 인덱스를 사용할 수 없는 정렬에 메모리를 얼마나 할당할지 결정하는 값
# 일반적으로 DBMS 에서 가장 큰 부하를 일으키는 작업이 바로 정렬이다. 이 크기가 작으면 디스크를 사용할 확률이 높아지고, 커지면 각 스레드의 메모리 사용량이 높아져서 메모리 낭비가 심해진다.
# 권장값은 64KB ~ 512KB 사이이다.
sort_buffer_size = 128K
# 2) Using Buffer Join을 쓸 때의 메모리 할당량
join_buffer_size = 128K
# 3) Table Full Scan이 발생하는 경우 사용하는 버퍼 (스토리지엔진마다 다른 사용처가 존재한 애매한 옵션)
read_buffer_size = 128K
# 4) Two-pass 알고리즘 사용 이후 데이터를 읽을때 사용할 버퍼의 크기
read_rnd_buffer_size = 128K

# 쿼리 캐시에 관련된 캐시 크기 설정
# 128MB 이상은 설정하지 않는 것이 좋으며, 데이터가 변경되지 않고 읽기 전용으로만 사용되는 경우 조금씩 늘리면서 성능을 확인한다.
# 데이터의 변경이 많은 경우 64MB 이상으로는 설정하지 않는 것이 좋다.
query_cahce_size = 32M
query_cache_limit = 2M

# GROUP.CONCAT() 함수 결과의 최대 길이
group_concat_max_len = 1024

# 트랜잭션 격리수준 설정 (기본값은 REPEATABLE_READ)
# 일반적으로는 REPEATABLE_READ 와 READ_COMMITTED 이다.
transaction-isolation = REPEATABLE-READ

# LRU 리스트 -> MRU 리스트 대기시간 (ms)
innodb_old_blocks_time = 500

# (5.1버전 한정) built-in 버전의 InnoDB 무시
ignore_builtin_innodb

# 디스크의 데이터를 메모리에 캐싱함과 동시에 데이터의 변경을 버퍼링하는 역할을 수행
# InnoDB 스토리지 엔진에서 가장 중요한 옵션이다.
# 일반적으로 OS나 MySQL 클라이언트에 대한 서버 스레드가 사용할 메모리를 제외하고 남는 거의 모든 메모리 공간을 설정한다.
innodb_buffer_pool_size = 10G

# InnoDB에서 관리하는 Table meta data를 위한 메모리 크기
innodb_additional_mem_pool_size = 16M

# 테이블마다 테이블 스페이스가 생기도록 하고 싶으면 1
innodb_file_per_table = 1

# InnoDB 테이블에 대한 데이터 파일 저장 위치
innodb_data_home_dir

# innodb_data_home_dir이 0일때 의미가 존재하는 옵션
innodb_data_file_path = ib_system:100M:autoextend
innodb_autoextend_increment = 100

# Redo 로그 위치
# InnoDB와 같이 트랜잭션을 지원하는 RDBMS는 ACID 보장과 동시에 성능 향상을 목적으로 데이터의 변경 이력을 별도의 파일에 순차적으로 기록해 두는데, 이를 트랜잭션 로그 혹은 Redo 로그 라고 한다.
# 이 로그는 사람이 읽을 수 있는 로그는 아니고 서버의 갑작스런 종료 시 종료되지 않은 트랜잭션을 복구하기 위한 용도로 사용된다.
innodb_log_group_home_dir = /usr/local/mysql/data

# 로그 출력을 위한 버퍼
# 데이터 변경 시 해당 변경사항을 바로 리두 로그에 기록하면 디스크 I/O 가 빈번해져서 비효율적이기 때문에 버퍼를 사용한다.
# 전역적으로 생성되며, 16~32 MB 정도면 충분하다.
innodb_log_buffer_size = 16M

# Redo 로그 파일 1개의 크기
# InnoDB의 리두 로그 파일은 1개 이상의 파일로 구성되지만 각 파일을 순환 큐(Circular Queue)처럼 연결해서 사용한다.
innodb_log_file_size = 1024M
# Redo 로그 개수
innodb_log_files_in_group = 2

# InnoDB에서 잠금(Lock) 획득을 위해 최대 대기할 수 있는 시간
innodb_lock_wait_timeout = 60

# InnoDB에서 트랜잭션이 커밋될 때마다 리두 로그를 디스크에 플러시할지 결정하는 옵션
innodb_flush_log_at_trx_commit = 1

# Unix/Linux에서 데이터 파일, 로그 파일을 읽고 쓰는 방법을 지정
innodb_flush_method = 0_DIRECT

# MyISAM 테이블에서 사용하고 있는 모든 쓰레드에서 공유하는 버퍼 크기
# 메모리에 있는 인덱스 블록에서 사용되는 버퍼의 크기를 나타낸다.
# MyISAM만을 사용하는 경우, key_buffer_size = RAM의 20%, innodb_buffer_pool_size = 0 으로 설정
# InnoDB만을 사용하는 경우, key_buffer_size = 10M (0이 아닌 값으로 작게 설정), inodb_buffer_pool_size = RAM의 70% 으로 설정
key_buffer_size = 32M

# 실행된 모든 쿼리 기록 여부
# MySQL에는 실행되는 모든 쿼리를 로그 파일로 기록하는 기능이 있는데, 이 로그를 쿼리 로그 혹인 제너럴(General) 로그라고 한다. 쿼리 수행이 많다면 쿼리 로그는 사용하지 않는 편이 좋다.
general_log = 0
general_log_file = /uar/local/mysql/logs/general_query.log

# 지정된 시간 이상으로 수행된 쿼리 기록 여부
# Slow DDL도 기록 여부
log_slow_admin_statements = ON
slow-query-log = 1
long_query_time = 1
slow_query_log_file = /uar/local/mysql/logs/slow_query.log

# MySQL 에서 복제를 구축하려면 마스터 서버에서 기록하는 바이너리 로그가 필요하다.
# 슬레이브 서버는 마스터의 바이너리 로그를 가져와서 재실행하는 것으로 마스터와 슬레이브 간의 데이터를 동기화한다.

# 바이너리 로그 prefix
log-bin = /uar/local/mysql/logs/binary_log
# 최대 파일의 크기
max_binlog_size = 512M
# 바이너리 로그 기록 시 즉시 디스크에 기록하지 않고 버퍼를 사용
binlog_cache_size = 128K
# 최대 로그 보관 일
expire_logs_days = 14

# 바이너리 로그 flush 여부 결정
sync_binlog = 1

# 마스터의 바이너리 로그를 가져와 슬레이브가 만드는 relay 로그
relay-log = /usr/local/mysql/logs/relay_log
relay_log_purge = TRUE

# 클라이언트 업데이트를 허용하지 않는 옵션
# 보통의 슬레이브 서버를 읽기 전용으로 만들기 위해 해당 옵션을 사용한다.
# 글로벌 동적 변수라서 필요한 경우 SET 명령으로 바로 읽기 전용을 해제할 수도 있다.
read_only